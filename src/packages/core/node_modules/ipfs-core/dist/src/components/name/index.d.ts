export = NameAPI;
declare class NameAPI {
    /**
     * @param {Object} config
     * @param {IPNS} config.ipns
     * @param {PeerId} config.peerId
     * @param {Options} config.options
     * @param {DagReader} config.dagReader
     * @param {IsOnline} config.isOnline
     * @param {Keychain} config.keychain
     * @param {DNS} config.dns
     */
    constructor({ dns, ipns, dagReader, peerId, isOnline, keychain, options }: {
        ipns: IPNS;
        peerId: PeerId;
        options: Options;
        dagReader: DagReader;
        isOnline: IsOnline;
        keychain: Keychain;
        dns: DNS;
    });
    publish: (value: string, options?: (import("./publish").PublishSettings & import("../../utils").AbortOptions) | undefined) => Promise<import("./publish").PublishResult>;
    resolve: (name: string, options?: (import("./resolve").Options & import("../../utils").AbortOptions) | undefined) => AsyncIterable<string>;
    pubsub: import("./pubsub");
}
declare namespace NameAPI {
    export { Options, ExperimentalOptions, PubSubOptions, ResolveOptions, IPNS, PeerId, DagReader, Keychain, IsOnline, DNS, AbortOptions };
}
type IPNS = import("../ipns");
type PeerId = import("peer-id");
type Options = import("./resolve").ResolveOptions & ExperimentalOptions;
type DagReader = {
    get: (ipfsPath: string | import("cids/src/"), options?: (import("../dag/get").GetOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../dag/get").DagEntry>;
    resolve: (ipfsPath: string | import("cids/src/"), options?: (import("../dag/resolve").ResolveOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../dag/resolve").ResolveResult>;
    tree: (ipfsPath: import("cids/src/"), options?: (import("../dag/tree").TreeOptions & import("../../utils").AbortOptions) | undefined) => AsyncIterable<string>;
};
type IsOnline = () => boolean;
type Keychain = any;
type DNS = (domain: string, options?: (import("../dns").DNSSettings & import("../../utils").AbortOptions) | undefined) => Promise<string>;
type ExperimentalOptions = {
    EXPERIMENTAL?: import("./pubsub/utils").PubSubRoutingOptions | undefined;
};
type PubSubOptions = {
    /**
     * - Enable pub-sub on IPNS. (Default: `false`)
     */
    ipnsPubsub?: boolean | undefined;
};
type ResolveOptions = {
    offline?: boolean | undefined;
};
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map