export = ObjectPatchAPI;
declare class ObjectPatchAPI {
    /**
     * @param {Object} config
     * @param {IPLD} config.ipld
     * @param {Preload} config.preload
     * @param {GCLock} config.gcLock
     */
    constructor({ ipld, preload, gcLock }: {
        ipld: IPLD;
        preload: Preload;
        gcLock: GCLock;
    });
    addLink: (multihash?: any, link?: any, options?: any) => Promise<import("cids/src/")>;
    appendData: (multihash?: any, data?: any, options?: any) => Promise<import("cids/src/")>;
    rmLink: (multihash?: any, linkRef?: any, options?: any) => Promise<import("cids/src/")>;
    setData: (multihash?: any, data?: any, options?: any) => Promise<import("cids/src/")>;
}
declare namespace ObjectPatchAPI {
    export { IPLD, Preload, GCLock, CID, AbortOptions };
}
type IPLD = import("../../../interface/ipld").IPLD<any>;
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    start(): void;
    stop(): void;
};
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type CID = import("cids/src/");
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map