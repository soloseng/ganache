declare function _exports({ dns, ipns, peerId, isOnline, options: { offline } }: {
    dns: import('.').DNS;
    ipns: import('.').IPNS;
    peerId: import('.').PeerId;
    isOnline: import('.').IsOnline;
    options: ResolveOptions;
}): (name: string, options?: (Options & import("../../utils").AbortOptions) | undefined) => AsyncIterable<string>;
export = _exports;
/**
 * IPFS resolve options.
 */
export type Options = {
    /**
     * - do not use cached entries.
     */
    nocache?: boolean | undefined;
    /**
     * - resolve until the result is not an IPNS name.
     */
    recursive?: boolean | undefined;
};
/**
 * IPFS resolve options.
 */
export type ResolveOptions = {
    offline?: boolean | undefined;
};
/**
 * IPFS resolve options.
 */
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=resolve.d.ts.map