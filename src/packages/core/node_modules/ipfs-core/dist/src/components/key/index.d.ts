export = KeyAPI;
declare class KeyAPI {
    /**
     * @param {Object} config
     * @param {Keychain} config.keychain
     */
    constructor({ keychain }: {
        keychain: Keychain;
    });
    gen: (name: string, options?: (import("./gen").GenOptions & import("../../utils").AbortOptions) | undefined) => Promise<Key>;
    list: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("./list").KeyEntry[]>;
    rm: (name: string, options: import("../../utils").AbortOptions) => Promise<import("./rm").RemovedKey>;
    rename: (oldName: string, newName: string, options?: import("../../utils").AbortOptions | undefined) => Promise<import("./rename").RenamedKey>;
    export: (name: string, password: string, options: import("../../utils").AbortOptions) => Promise<string>;
    import: (name: string, pem: string, password: string, options: import("../../utils").AbortOptions) => Promise<Key>;
    info: (name: string, options?: import("../../utils").AbortOptions | undefined) => Promise<Key>;
}
declare namespace KeyAPI {
    export { Keychain, AbortOptions, Key };
}
type Key = {
    name: string;
    id: string;
};
type Keychain = any;
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map