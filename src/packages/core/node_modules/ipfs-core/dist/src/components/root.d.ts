export = RootAPI;
declare class RootAPI {
    /**
     * @param {Object} config
     * @param {Block} config.block
     * @param {Pin} config.pin
     * @param {GCLock} config.gcLock
     * @param {Preload} config.preload
     * @param {IPLD} config.ipld
     * @param {ShardingOptions} [config.options]
     */
    constructor({ preload, gcLock, pin, block, ipld, options }: {
        block: Block;
        pin: Pin;
        gcLock: GCLock;
        preload: Preload;
        ipld: IPLD;
        options: import("./add-all").ShardingOptions | undefined;
    });
    addAll: (source: import("ipfs-core-utils/src/files/normalise-input/normalise-input").Source, options?: (import("./add-all").AddAllOptions & import("../utils").AbortOptions) | undefined) => AsyncIterable<import("./add-all").UnixFSEntry>;
    add: (source: import("ipfs-core-utils/src/files/normalise-input/normalise-input").FileInput, options?: (import("./add").AddOptions & import("../utils").AbortOptions) | undefined) => Promise<import("./add-all").UnixFSEntry>;
    cat: (ipfsPath: string | import("cids/src/"), options?: (import("./cat").CatOptions & import("../utils").AbortOptions) | undefined) => AsyncIterable<Uint8Array>;
    get: (ipfsPath: string | import("cids/src/"), options?: (import("./get").GetOptions & import("../utils").AbortOptions) | undefined) => AsyncIterable<import("../utils").File | import("../utils").Directory>;
    ls: (ipfsPath: string | import("cids/src/"), options?: (import("./ls").LSOptions & import("../utils").AbortOptions) | undefined) => AsyncIterable<import("../utils").File | import("../utils").Directory>;
}
declare namespace RootAPI {
    export { Block, Pin, GCLock, IPLD, Preload, ShardingOptions };
}
type Block = import("./block");
type Pin = import("./pin");
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    start(): void;
    stop(): void;
};
type IPLD = import("../interface/ipld").IPLD<any>;
type ShardingOptions = {
    sharding?: boolean | undefined;
};
//# sourceMappingURL=root.d.ts.map