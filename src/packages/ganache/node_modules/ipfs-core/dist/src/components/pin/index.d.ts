export = PinAPI;
declare class PinAPI {
    /**
     * @param {Object} config
     * @param {GCLock} config.gcLock
     * @param {DagReader} config.dagReader
     * @param {PinManager} config.pinManager
     */
    constructor({ gcLock, dagReader, pinManager }: {
        gcLock: GCLock;
        dagReader: DagReader;
        pinManager: PinManager;
    });
    addAll: (source: any, options?: (import("./add-all").AddSettings & import("../../utils").AbortOptions) | undefined) => AsyncIterable<import("cids/src/")>;
    add: (path: string | import("cids/src/"), options?: (import("./add").AddOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("cids/src/")>;
    rmAll: (source: any, _options?: import("../../utils").AbortOptions | undefined) => AsyncIterable<import("cids/src/")>;
    rm: (path: string | import("cids/src/"), options?: (import("./rm").RmSettings & import("../../utils").AbortOptions) | undefined) => Promise<import("cids/src/")>;
    ls: (options?: (import("./ls").LsSettings & import("../../utils").AbortOptions) | undefined) => AsyncIterable<import("./ls").LsEntry>;
}
declare namespace PinAPI {
    export { Repo, GCLock, DagReader, PinManager, AbortOptions, CID };
}
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type DagReader = {
    get: (ipfsPath: string | import("cids/src/"), options?: (import("../dag/get").GetOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../dag/get").DagEntry>;
    resolve: (ipfsPath: string | import("cids/src/"), options?: (import("../dag/resolve").ResolveOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../dag/resolve").ResolveResult>;
    tree: (ipfsPath: import("cids/src/"), options?: (import("../dag/tree").TreeOptions & import("../../utils").AbortOptions) | undefined) => AsyncIterable<string>;
};
type PinManager = import("./pin-manager");
type Repo = import("../../interface/repo").Repo<import("../config").IPFSConfig>;
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
type CID = import("cids/src/");
//# sourceMappingURL=index.d.ts.map