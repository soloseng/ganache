export = BlockAPI;
declare class BlockAPI {
    /**
     * @param {Object} config
     * @param {Preload} config.preload
     * @param {BlockService} config.blockService
     * @param {GCLock} config.gcLock
     * @param {Pin} config.pin
     * @param {PinManager} config.pinManager
     */
    constructor({ blockService, preload, gcLock, pinManager, pin }: {
        preload: Preload;
        blockService: BlockService;
        gcLock: GCLock;
        pin: Pin;
        pinManager: PinManager;
    });
    get: (cid: string | import("cids/src/") | Uint8Array, options?: (import("./get").GetOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../../interface/basic").Block>;
    put: (block: Uint8Array | import("../../interface/basic").Block, options?: (import("./put").PutOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("../../interface/basic").Block>;
    rm: (cids: import("cids/src/") | import("cids/src/")[], options?: (import("./rm").RmOptions & import("../../utils").AbortOptions) | undefined) => AsyncIterable<import("./rm").RmSucceess | import("./rm").RmFailure>;
    stat: (cid: import("cids/src/"), options?: (import("./stat").StatOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("./stat").Stat>;
}
declare namespace BlockAPI {
    export { Preload, BlockService, GCLock, Pin, PinManager, AbortOptions, CID, IPLDBlock };
}
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    start(): void;
    stop(): void;
};
type BlockService = import("../../interface/block-service").BlockService;
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type Pin = import("../pin");
type PinManager = import("../pin/pin-manager");
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
type CID = import("cids/src/");
type IPLDBlock = import("../../interface/basic").Block;
//# sourceMappingURL=index.d.ts.map