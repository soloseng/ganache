export = ObjectAPI;
declare class ObjectAPI {
    /**
     * @param {Object} config
     * @param {IPLD} config.ipld
     * @param {Preload} config.preload
     * @param {GCLock} config.gcLock
     * @param {Dag} config.dag
     */
    constructor({ ipld, preload, dag, gcLock }: {
        ipld: IPLD;
        preload: Preload;
        gcLock: GCLock;
        dag: Dag;
    });
    data: (multihash: import("cids/src/"), options: import("./get").GetOptions & import("../../utils").AbortOptions) => Promise<any>;
    get: (multihash: import("cids/src/"), options?: (import("./get").GetOptions & import("../../utils").AbortOptions) | undefined) => Promise<any>;
    links: (multihash: import("cids/src/"), options?: import("../../utils").AbortOptions | undefined) => Promise<any[]>;
    new: (options?: (import("./new").NewOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("cids/src/")>;
    put: (obj: any, options?: (import("./put").PutOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("cids/src/")>;
    stat: (multihash: import("cids/src/"), options?: (import("./get").GetOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("./stat").Stat>;
    patch: import("./patch");
}
declare namespace ObjectAPI {
    export { IPLD, Preload, GCLock, Dag, CID, AbortOptions };
}
type IPLD = import("../../interface/ipld").IPLD<any>;
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    start(): void;
    stop(): void;
};
type GCLock = {
    readLock: () => Promise<() => void>;
    writeLock: () => Promise<() => void>;
};
type Dag = import("../dag");
type CID = import("cids/src/");
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map