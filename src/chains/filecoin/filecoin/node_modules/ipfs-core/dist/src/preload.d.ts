export = createPreloader;
/**
 * @param {Options & AbortOptions} [options]
 */
declare function createPreloader(options?: (Options & import("./utils").AbortOptions) | undefined): ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    /**
     * @returns {void}
     */
    start(): void;
    /**
     * @returns {void}
     */
    stop(): void;
};
declare namespace createPreloader {
    export { Preload, Options, AbortOptions };
}
type Options = {
    /**
     * - Whether to preload anything
     */
    enabled?: boolean | undefined;
    /**
     * - How many CIDs to cache
     */
    cache?: number | undefined;
    /**
     * - Which preload servers to use.
     * **NOTE:** nodes specified here should also be added to your node's bootstrap address list at `config.Boostrap`.
     */
    addresses?: string[] | undefined;
};
type Preload = ((() => void) & {
    start: () => void;
    stop: () => void;
}) | {
    (path: string | import("cids/src/")): Promise<void>;
    /**
     * @returns {void}
     */
    start(): void;
    /**
     * @returns {void}
     */
    stop(): void;
};
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=preload.d.ts.map