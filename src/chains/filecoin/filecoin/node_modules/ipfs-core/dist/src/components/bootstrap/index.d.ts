export = BootstrapAPI;
declare class BootstrapAPI {
    /**
     * @param {Object} config
     * @param {Repo} config.repo
     */
    constructor({ repo }: {
        repo: Repo;
    });
    add: (multiaddr: import("multiaddr"), options?: import("../../utils").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    list: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    rm: (multiaddr: import("multiaddr"), options?: import("../../utils").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    clear: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("./utils").Peers>;
    reset: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("./utils").Peers>;
}
declare namespace BootstrapAPI {
    export { Repo, AbortOptions, CID, Multiaddr };
}
type Repo = import("../../interface/repo").Repo<import("../config").IPFSConfig>;
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
type CID = import("cids/src/");
type Multiaddr = import("multiaddr");
//# sourceMappingURL=index.d.ts.map