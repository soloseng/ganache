export = SwarmAPI;
declare class SwarmAPI {
    /**
     * @param {Object} config
     * @param {NetworkService} config.network
     */
    constructor({ network }: {
        network: import("../../utils/service")<import("../network").Options, import("../network")>;
    });
    addrs: (options: import("../../utils").AbortOptions) => Promise<import("./addrs").PeerInfo[]>;
    connect: (addr: import("multiaddr"), options?: import("../../utils").AbortOptions | undefined) => Promise<void>;
    disconnect: (addr: import("multiaddr"), options?: import("../../utils").AbortOptions | undefined) => Promise<void>;
    localAddrs: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("multiaddr")[]>;
    peers: (options?: (import("./peers").PeersOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("./peers").PeerConnection[]>;
}
declare namespace SwarmAPI {
    export { NetworkService, Multiaddr, AbortOptions };
}
type NetworkService = import("../../utils/service")<import("../network").Options, import("../network")>;
type Multiaddr = import("multiaddr");
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map