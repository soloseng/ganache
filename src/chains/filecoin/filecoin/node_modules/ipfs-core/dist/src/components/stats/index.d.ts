export = StatsAPI;
declare class StatsAPI {
    /**
     * @param {Object} config
     * @param {Repo} config.repo
     * @param {NetworkService} config.network
     */
    constructor({ repo, network }: {
        repo: Repo;
        network: import("../../utils/service")<import("../network").Options, import("../network")>;
    });
    repo: (options?: import("../../utils").AbortOptions | undefined) => Promise<{
        numObjects: number;
        repoSize: number;
        repoPath: string;
        version: string;
        storageMax: number;
    }>;
    bw: (options?: (import("./bw").BWOptions & import("../../utils").AbortOptions) | undefined) => AsyncIterable<import("./bw").BandwidthInfo>;
    bitswap: (options?: import("../../utils").AbortOptions | undefined) => Promise<import("../bitswap/stat").BitswapStats>;
}
declare namespace StatsAPI {
    export { Repo, PeerId, LibP2P, CID, NetworkService, AbortOptions };
}
type Repo = import("../../interface/repo").Repo<import("../config").IPFSConfig>;
type PeerId = import("peer-id");
type LibP2P = any;
type CID = import("cids/src/");
type NetworkService = import("../../utils/service")<import("../network").Options, import("../network")>;
type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=index.d.ts.map