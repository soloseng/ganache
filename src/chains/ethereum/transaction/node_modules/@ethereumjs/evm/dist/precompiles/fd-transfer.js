"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.precompileFdTransfer = void 0;
const util_1 = require("@ethereumjs/util");
const evm_1 = require("../evm");
const assert = require('assert');
// import assert from 'assert'
async function incrementBalance(stateManager, address, delta) {
    const account = await stateManager.getAccount(address);
    account.balance = BigInt(account.balance) + delta;
    await stateManager.putAccount(address, account);
}
async function precompileFdTransfer(opts) {
    assert(opts.data);
    // TODO(asa): Pick an appropriate gas amount
    const gasUsed = BigInt(20);
    if (opts.gasLimit < gasUsed) {
        return (0, evm_1.OOGResult)(opts.gasLimit);
    }
    // data is the ABI encoding for [address,address,uint256]
    // 32 bytes each, but the addresses only use 20 bytes.
    const fromAddress = new util_1.Address(opts.data.slice(12, 32));
    const toAddress = new util_1.Address(opts.data.slice(44, 64));
    const value = (0, util_1.bufferToBigInt)(opts.data.slice(64, 96));
    await incrementBalance(opts._EVM.eei, fromAddress, value * BigInt(-1));
    await incrementBalance(opts._EVM.eei, toAddress, value);
    return {
        executionGasUsed: gasUsed,
        returnValue: Buffer.alloc(0),
    };
}
exports.precompileFdTransfer = precompileFdTransfer;
//# sourceMappingURL=fd-transfer.js.map